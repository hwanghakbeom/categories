#e-*- coding: utf-8 -*-
import fileinput
import sys
import json
import re
import requests
import csv
import warnings
import numpy as np
import pandas as pd
from StringIO import StringIO
from sklearn.feature_extraction.text import CountVectorizer
from sklearn import linear_model
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.externals import joblib
import MySQLdb

mysql_cn= MySQLdb.connect(host='localhost', port=3306,user='root', passwd='1234',db='ml')
df_mysql = pd.read_sql('select ITEM,NUMBER from cate;', con=mysql_cn,index_col='NUMBER')  
print 'loaded dataframe from MySQL. records:', len(df_mysql)
mysql_cn.close()


enr_cate_id = [
#'01'
#,'02'
#,'03'
#,'04'
#,'05'
#,'06'
#,'07'
#,'08'
#,'09'
#,'10'
#,'11'
#,'12'
#,'13'
#,'16'
#,'17'
#,'18'
#,'19'
#,'20','21','22','23','24','91','92','93','94','95']
01
,02
,03
,04
,05
,06
,07
,8
,9
,10
,11
,12
,13
,14
,15
,16
,17
,18
,19
,20,21,22,23,24,91,92,93,94,95
]
filename = "newfile.txt"
cuttedfile = "temp.txt"
errorindex = 1
dffirst = pd.read_csv(filename, index_col='user_id',nrows=0,delimiter = '<|>',engine='python')

while errorindex:
  try:
    dffront = pd.read_csv(filename, index_col='user_id',delimiter = '<|>',engine='python')
    errorindex = 0
  except ValueError as e:
    print e
    m = re.findall(r'\d+', str(e))
    errorindex = int(m[1]) - 1
    print str(errorindex - 1)
    lines = open(filename).readlines()
    #open(cuttedfile,"w").writelines("user_id<|>enr_cate_id\n")
    open(cuttedfile, 'w').writelines(lines[:errorindex -1]) 
    dfbeforeError = pd.read_csv(cuttedfile, index_col='user_id',delimiter = '<|>',engine='python')
    print len(dfbeforeError)
    frames = [dffirst,dfbeforeError]
    dffirst = pd.concat(frames)
    print len(dffirst)
    open(filename, 'w').writelines("user_id<|>enr_cate_id\n")
    open(filename, 'a').writelines(lines[errorindex:])

vectorizer = CountVectorizer(min_df=1, tokenizer=lambda x: list(x))
corpus = [name for name in dffirst.index]
analyze = vectorizer.build_analyzer()

X = vectorizer.fit_transform(corpus)
print enr_cate_id
Y = map(enr_cate_id.index, dffirst.enr_cate_id.tolist())

clf = LinearSVC(C=1.0)
clf.fit(X[:-200], Y[:-200])

P = clf.predict(X[-200:])
print accuracy_score(Y[-200:], P) * 100

joblib.dump(clf, 'filename.pkl') 

#df1 = pd.read_csv("top2.csv", index_col='user_id', delimiter = '<|>',engine='python')
#corpus1 = [name for name in df1.index]

#X1 = vectorizer.fit_transform(corpus1)
#Y1 = map(enr_cate_id.index, df.enr_cate_id.tolist())

#clf2 = joblib.load('filename.pkl') 
#clf2.fit(X1,Y1)
#P1 = clf2.predict(X[-200:])
#print accuracy_score(Y[-200:], P1) * 100


